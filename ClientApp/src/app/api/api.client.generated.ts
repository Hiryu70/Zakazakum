/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Получить все заказы
     * @param orderStatus (optional) 
     * @return Success
     */
    order(orderStatus: OrderStatus | undefined): Observable<OrdersListVm> {
        let url_ = this.baseUrl + "/api/order?";
        if (orderStatus === null)
            throw new Error("The parameter 'orderStatus' cannot be null.");
        else if (orderStatus !== undefined)
            url_ += "OrderStatus=" + encodeURIComponent("" + orderStatus) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOrder(<any>response_);
                } catch (e) {
                    return <Observable<OrdersListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrdersListVm>><any>_observableThrow(response_);
        }));
    }

    protected processOrder(response: HttpResponseBase): Observable<OrdersListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrdersListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrdersListVm>(<any>null);
    }

    /**
     * Создать новый заказ
     * @param body (optional) Идентификатор нового заказа
     * @return Success
     */
    order2(body: CreateOrderCommand | undefined): Observable<CreateOrderVm> {
        let url_ = this.baseUrl + "/api/order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOrder2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOrder2(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrderVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrderVm>><any>_observableThrow(response_);
        }));
    }

    protected processOrder2(response: HttpResponseBase): Observable<CreateOrderVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrderVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrderVm>(<any>null);
    }

    /**
     * Получить заказ по идентификатору
     * @return Success
     */
    order3(orderId: number): Observable<GetOrderVm> {
        let url_ = this.baseUrl + "/api/order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOrder3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOrder3(<any>response_);
                } catch (e) {
                    return <Observable<GetOrderVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetOrderVm>><any>_observableThrow(response_);
        }));
    }

    protected processOrder3(response: HttpResponseBase): Observable<GetOrderVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetOrderVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetOrderVm>(<any>null);
    }

    /**
     * Обновить стоимость доставки
     * @param orderId Идентификатор заказа
     * @param body (optional) Стоимость доставки
     * @return Success
     */
    updateDeliveryCost(orderId: number, body: DeliveryCostVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/order/{orderId}/update-delivery-cost";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDeliveryCost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDeliveryCost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateDeliveryCost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Добавить еду в заказ
     * @param orderId Идентификатор заказа
     * @param body (optional) Заказ еды
     * @return Success
     */
    foodOrder(orderId: number, body: AddFoodOrderVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/order/{orderId}/food-order";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFoodOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFoodOrder(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processFoodOrder(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Редактировать еду в заказе
     * @param orderId Идентификатор заказа
     * @param body (optional) Заказ еды
     * @return Success
     */
    foodOrder2(orderId: number, body: UpdateFoodOrderVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/order/{orderId}/food-order";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFoodOrder2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFoodOrder2(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processFoodOrder2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Удалить еду в заказе
     * @param orderId Идентификатор заказа
     * @param body (optional) Заказ еды
     * @return Success
     */
    foodOrder3(orderId: number, body: DeleteFoodOrderVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/order/{orderId}/food-order";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFoodOrder3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFoodOrder3(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processFoodOrder3(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Установить статус оплаты заказа пользователем
     * @param orderId Идентификатор заказа
     * @param body (optional) Статус оплаты заказа пользователем
     * @return Success
     */
    setUserPaid(orderId: number, body: UserPaidStatusVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/order/{orderId}/set-user-paid";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetUserPaid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetUserPaid(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetUserPaid(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Установить статус заказа
     * @param orderId Идентификатор заказа
     * @param body (optional) Статус заказа
     * @return Success
     */
    setOrderStatus(orderId: number, body: SetOrderStatusVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/order/{orderId}/set-order-status";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetOrderStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetOrderStatus(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetOrderStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Получить все рестораны
     * @return Success
     */
    restaurant(): Observable<RestaurantsListVm> {
        let url_ = this.baseUrl + "/api/restaurant";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRestaurant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestaurant(<any>response_);
                } catch (e) {
                    return <Observable<RestaurantsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<RestaurantsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processRestaurant(response: HttpResponseBase): Observable<RestaurantsListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RestaurantsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RestaurantsListVm>(<any>null);
    }

    /**
     * Создать новый ресторан
     * @param body (optional) 
     * @return Success
     */
    restaurant2(body: CreateRestaurantCommand | undefined): Observable<RestaurantsListVm> {
        let url_ = this.baseUrl + "/api/restaurant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRestaurant2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestaurant2(<any>response_);
                } catch (e) {
                    return <Observable<RestaurantsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<RestaurantsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processRestaurant2(response: HttpResponseBase): Observable<RestaurantsListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RestaurantsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RestaurantsListVm>(<any>null);
    }

    /**
     * Редактировать ресторан
     * @param body (optional) Новые параметры ресторана
     * @return Success
     */
    restaurant3(body: UpdateRestaurantCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/restaurant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRestaurant3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestaurant3(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRestaurant3(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Получить всю еду в ресторане
     * @param restaurantId Идентификатор ресторана
     * @return Success
     */
    restaurant4(restaurantId: string): Observable<FoodsListVm> {
        let url_ = this.baseUrl + "/api/restaurant/{restaurantId}";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRestaurant4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestaurant4(<any>response_);
                } catch (e) {
                    return <Observable<FoodsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<FoodsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processRestaurant4(response: HttpResponseBase): Observable<FoodsListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FoodsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FoodsListVm>(<any>null);
    }

    /**
     * Создать новую еду в ресторане
     * @param restaurantId Идентификатор ресторана
     * @param body (optional) Еда
     * @return Success
     */
    food(restaurantId: string, body: AddFoodVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/restaurant/{restaurantId}/food";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFood(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFood(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processFood(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Редактировать еду в ресторане
     * @param restaurantId Идентификатор ресторана
     * @param body (optional) Еда
     * @return Success
     */
    food2(restaurantId: string, body: EditFoodVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/restaurant/{restaurantId}/food";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFood2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFood2(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processFood2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Удалить еду в ресторане
     * @param restaurantId Идентификатор ресторана
     * @param body (optional) Еда
     * @return Success
     */
    food3(restaurantId: string, body: DeleteFoodVm | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/restaurant/{restaurantId}/food";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFood3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFood3(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processFood3(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Блюдо с данным названием уже существует в ресторане
     * @param body (optional) Параметры блюда
     * @return Success
     */
    isFoodTitleTaken(body: IsFoodTitleTakenQuery | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/restaurant/is-food-title-taken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsFoodTitleTaken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsFoodTitleTaken(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processIsFoodTitleTaken(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * Получить всех пользователей
     * @return Success
     */
    user(): Observable<UsersListVm> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUser(<any>response_);
                } catch (e) {
                    return <Observable<UsersListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<UsersListVm>><any>_observableThrow(response_);
        }));
    }

    protected processUser(response: HttpResponseBase): Observable<UsersListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsersListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UsersListVm>(<any>null);
    }

    /**
     * Создать нового пользователя
     * @param body (optional) Параметры нового пользователя
     * @return Success
     */
    user2(body: CreateUserCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUser2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUser2(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUser2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Редактировать пользователя
     * @param body (optional) Новые параметры пользователя
     * @return Success
     */
    user3(body: UpdateUserCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUser3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUser3(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUser3(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Данный номер телефона используется
     * @param body (optional) Номер телефона
     * @return Success
     */
    isPhoneNumberTaken(body: IsPhoneNumberTakenQuery | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/user/is-phone-number-taken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsPhoneNumberTaken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsPhoneNumberTaken(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processIsPhoneNumberTaken(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }
}

export enum OrderStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class GetOrdersVm implements IGetOrdersVm {
    id?: number;
    orderStatus?: OrderStatus;
    ownerName?: string | undefined;
    created?: Date;
    restaurantTitle?: string | undefined;
    restaurantId?: string;

    constructor(data?: IGetOrdersVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.orderStatus = _data["OrderStatus"];
            this.ownerName = _data["OwnerName"];
            this.created = _data["Created"] ? new Date(_data["Created"].toString()) : <any>undefined;
            this.restaurantTitle = _data["RestaurantTitle"];
            this.restaurantId = _data["RestaurantId"];
        }
    }

    static fromJS(data: any): GetOrdersVm {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrdersVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["OrderStatus"] = this.orderStatus;
        data["OwnerName"] = this.ownerName;
        data["Created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["RestaurantTitle"] = this.restaurantTitle;
        data["RestaurantId"] = this.restaurantId;
        return data; 
    }
}

export interface IGetOrdersVm {
    id?: number;
    orderStatus?: OrderStatus;
    ownerName?: string | undefined;
    created?: Date;
    restaurantTitle?: string | undefined;
    restaurantId?: string;
}

export class OrdersListVm implements IOrdersListVm {
    orders?: GetOrdersVm[] | undefined;

    constructor(data?: IOrdersListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Orders"])) {
                this.orders = [] as any;
                for (let item of _data["Orders"])
                    this.orders!.push(GetOrdersVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrdersListVm {
        data = typeof data === 'object' ? data : {};
        let result = new OrdersListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.orders)) {
            data["Orders"] = [];
            for (let item of this.orders)
                data["Orders"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrdersListVm {
    orders?: GetOrdersVm[] | undefined;
}

export class CreateOrderCommand implements ICreateOrderCommand {
    restaurantId?: string;
    ownerId?: string;

    constructor(data?: ICreateOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.restaurantId = _data["RestaurantId"];
            this.ownerId = _data["OwnerId"];
        }
    }

    static fromJS(data: any): CreateOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RestaurantId"] = this.restaurantId;
        data["OwnerId"] = this.ownerId;
        return data; 
    }
}

export interface ICreateOrderCommand {
    restaurantId?: string;
    ownerId?: string;
}

export class CreateOrderVm implements ICreateOrderVm {
    orderId?: number;

    constructor(data?: ICreateOrderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["OrderId"];
        }
    }

    static fromJS(data: any): CreateOrderVm {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderId"] = this.orderId;
        return data; 
    }
}

export interface ICreateOrderVm {
    orderId?: number;
}

export class UserReceiptVm implements IUserReceiptVm {
    userId?: string;
    name?: string | undefined;
    total?: number;
    foodCost?: number;
    deliveryCost?: number;
    isOrderPaid?: boolean;

    constructor(data?: IUserReceiptVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"];
            this.name = _data["Name"];
            this.total = _data["Total"];
            this.foodCost = _data["FoodCost"];
            this.deliveryCost = _data["DeliveryCost"];
            this.isOrderPaid = _data["IsOrderPaid"];
        }
    }

    static fromJS(data: any): UserReceiptVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserReceiptVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId;
        data["Name"] = this.name;
        data["Total"] = this.total;
        data["FoodCost"] = this.foodCost;
        data["DeliveryCost"] = this.deliveryCost;
        data["IsOrderPaid"] = this.isOrderPaid;
        return data; 
    }
}

export interface IUserReceiptVm {
    userId?: string;
    name?: string | undefined;
    total?: number;
    foodCost?: number;
    deliveryCost?: number;
    isOrderPaid?: boolean;
}

export class GetFoodOrderVm implements IGetFoodOrderVm {
    foodOrderId?: string;
    foodId?: string;
    cost?: number;
    title?: string | undefined;
    comment?: string | undefined;
    count?: number;
    userId?: string;
    userName?: string | undefined;

    constructor(data?: IGetFoodOrderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.foodOrderId = _data["FoodOrderId"];
            this.foodId = _data["FoodId"];
            this.cost = _data["Cost"];
            this.title = _data["Title"];
            this.comment = _data["Comment"];
            this.count = _data["Count"];
            this.userId = _data["UserId"];
            this.userName = _data["UserName"];
        }
    }

    static fromJS(data: any): GetFoodOrderVm {
        data = typeof data === 'object' ? data : {};
        let result = new GetFoodOrderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FoodOrderId"] = this.foodOrderId;
        data["FoodId"] = this.foodId;
        data["Cost"] = this.cost;
        data["Title"] = this.title;
        data["Comment"] = this.comment;
        data["Count"] = this.count;
        data["UserId"] = this.userId;
        data["UserName"] = this.userName;
        return data; 
    }
}

export interface IGetFoodOrderVm {
    foodOrderId?: string;
    foodId?: string;
    cost?: number;
    title?: string | undefined;
    comment?: string | undefined;
    count?: number;
    userId?: string;
    userName?: string | undefined;
}

export class UserGroupedReceiptVm implements IUserGroupedReceiptVm {
    userId?: string;
    name?: string | undefined;
    total?: number;
    foodCost?: number;
    deliveryCost?: number;
    isOrderPaid?: boolean;
    foodOrders?: GetFoodOrderVm[] | undefined;

    constructor(data?: IUserGroupedReceiptVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"];
            this.name = _data["Name"];
            this.total = _data["Total"];
            this.foodCost = _data["FoodCost"];
            this.deliveryCost = _data["DeliveryCost"];
            this.isOrderPaid = _data["IsOrderPaid"];
            if (Array.isArray(_data["FoodOrders"])) {
                this.foodOrders = [] as any;
                for (let item of _data["FoodOrders"])
                    this.foodOrders!.push(GetFoodOrderVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserGroupedReceiptVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroupedReceiptVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId;
        data["Name"] = this.name;
        data["Total"] = this.total;
        data["FoodCost"] = this.foodCost;
        data["DeliveryCost"] = this.deliveryCost;
        data["IsOrderPaid"] = this.isOrderPaid;
        if (Array.isArray(this.foodOrders)) {
            data["FoodOrders"] = [];
            for (let item of this.foodOrders)
                data["FoodOrders"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserGroupedReceiptVm {
    userId?: string;
    name?: string | undefined;
    total?: number;
    foodCost?: number;
    deliveryCost?: number;
    isOrderPaid?: boolean;
    foodOrders?: GetFoodOrderVm[] | undefined;
}

export class FoodGroupedReceiptVm implements IFoodGroupedReceiptVm {
    title?: string | undefined;
    comment?: string | undefined;
    count?: number;

    constructor(data?: IFoodGroupedReceiptVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["Title"];
            this.comment = _data["Comment"];
            this.count = _data["Count"];
        }
    }

    static fromJS(data: any): FoodGroupedReceiptVm {
        data = typeof data === 'object' ? data : {};
        let result = new FoodGroupedReceiptVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Comment"] = this.comment;
        data["Count"] = this.count;
        return data; 
    }
}

export interface IFoodGroupedReceiptVm {
    title?: string | undefined;
    comment?: string | undefined;
    count?: number;
}

export class GetOrderVm implements IGetOrderVm {
    id?: number;
    orderStatus?: OrderStatus;
    ownerName?: string | undefined;
    ownerBank?: string | undefined;
    ownerPhoneNumber?: string | undefined;
    created?: Date;
    restaurantTitle?: string | undefined;
    restaurantId?: string;
    deliveryCost?: number;
    deliveryCostPerUser?: number;
    totalCost?: number;
    userReceipts?: UserReceiptVm[] | undefined;
    userGroupedReceipts?: UserGroupedReceiptVm[] | undefined;
    foodGroupedReceipts?: FoodGroupedReceiptVm[] | undefined;
    foodReceipts?: GetFoodOrderVm[] | undefined;

    constructor(data?: IGetOrderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.orderStatus = _data["OrderStatus"];
            this.ownerName = _data["OwnerName"];
            this.ownerBank = _data["OwnerBank"];
            this.ownerPhoneNumber = _data["OwnerPhoneNumber"];
            this.created = _data["Created"] ? new Date(_data["Created"].toString()) : <any>undefined;
            this.restaurantTitle = _data["RestaurantTitle"];
            this.restaurantId = _data["RestaurantId"];
            this.deliveryCost = _data["DeliveryCost"];
            this.deliveryCostPerUser = _data["DeliveryCostPerUser"];
            this.totalCost = _data["TotalCost"];
            if (Array.isArray(_data["UserReceipts"])) {
                this.userReceipts = [] as any;
                for (let item of _data["UserReceipts"])
                    this.userReceipts!.push(UserReceiptVm.fromJS(item));
            }
            if (Array.isArray(_data["UserGroupedReceipts"])) {
                this.userGroupedReceipts = [] as any;
                for (let item of _data["UserGroupedReceipts"])
                    this.userGroupedReceipts!.push(UserGroupedReceiptVm.fromJS(item));
            }
            if (Array.isArray(_data["FoodGroupedReceipts"])) {
                this.foodGroupedReceipts = [] as any;
                for (let item of _data["FoodGroupedReceipts"])
                    this.foodGroupedReceipts!.push(FoodGroupedReceiptVm.fromJS(item));
            }
            if (Array.isArray(_data["FoodReceipts"])) {
                this.foodReceipts = [] as any;
                for (let item of _data["FoodReceipts"])
                    this.foodReceipts!.push(GetFoodOrderVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetOrderVm {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["OrderStatus"] = this.orderStatus;
        data["OwnerName"] = this.ownerName;
        data["OwnerBank"] = this.ownerBank;
        data["OwnerPhoneNumber"] = this.ownerPhoneNumber;
        data["Created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["RestaurantTitle"] = this.restaurantTitle;
        data["RestaurantId"] = this.restaurantId;
        data["DeliveryCost"] = this.deliveryCost;
        data["DeliveryCostPerUser"] = this.deliveryCostPerUser;
        data["TotalCost"] = this.totalCost;
        if (Array.isArray(this.userReceipts)) {
            data["UserReceipts"] = [];
            for (let item of this.userReceipts)
                data["UserReceipts"].push(item.toJSON());
        }
        if (Array.isArray(this.userGroupedReceipts)) {
            data["UserGroupedReceipts"] = [];
            for (let item of this.userGroupedReceipts)
                data["UserGroupedReceipts"].push(item.toJSON());
        }
        if (Array.isArray(this.foodGroupedReceipts)) {
            data["FoodGroupedReceipts"] = [];
            for (let item of this.foodGroupedReceipts)
                data["FoodGroupedReceipts"].push(item.toJSON());
        }
        if (Array.isArray(this.foodReceipts)) {
            data["FoodReceipts"] = [];
            for (let item of this.foodReceipts)
                data["FoodReceipts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetOrderVm {
    id?: number;
    orderStatus?: OrderStatus;
    ownerName?: string | undefined;
    ownerBank?: string | undefined;
    ownerPhoneNumber?: string | undefined;
    created?: Date;
    restaurantTitle?: string | undefined;
    restaurantId?: string;
    deliveryCost?: number;
    deliveryCostPerUser?: number;
    totalCost?: number;
    userReceipts?: UserReceiptVm[] | undefined;
    userGroupedReceipts?: UserGroupedReceiptVm[] | undefined;
    foodGroupedReceipts?: FoodGroupedReceiptVm[] | undefined;
    foodReceipts?: GetFoodOrderVm[] | undefined;
}

export class DeliveryCostVm implements IDeliveryCostVm {
    deliveryCost?: number;

    constructor(data?: IDeliveryCostVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryCost = _data["DeliveryCost"];
        }
    }

    static fromJS(data: any): DeliveryCostVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryCostVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DeliveryCost"] = this.deliveryCost;
        return data; 
    }
}

export interface IDeliveryCostVm {
    deliveryCost?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class AddFoodOrderVm implements IAddFoodOrderVm {
    id?: string;
    foodId?: string;
    userId?: string;
    count?: number;
    comment?: string | undefined;

    constructor(data?: IAddFoodOrderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.foodId = _data["FoodId"];
            this.userId = _data["UserId"];
            this.count = _data["Count"];
            this.comment = _data["Comment"];
        }
    }

    static fromJS(data: any): AddFoodOrderVm {
        data = typeof data === 'object' ? data : {};
        let result = new AddFoodOrderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["FoodId"] = this.foodId;
        data["UserId"] = this.userId;
        data["Count"] = this.count;
        data["Comment"] = this.comment;
        return data; 
    }
}

export interface IAddFoodOrderVm {
    id?: string;
    foodId?: string;
    userId?: string;
    count?: number;
    comment?: string | undefined;
}

export class UpdateFoodOrderVm implements IUpdateFoodOrderVm {
    id?: string;
    foodId?: string;
    userId?: string;
    count?: number;
    comment?: string | undefined;

    constructor(data?: IUpdateFoodOrderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.foodId = _data["FoodId"];
            this.userId = _data["UserId"];
            this.count = _data["Count"];
            this.comment = _data["Comment"];
        }
    }

    static fromJS(data: any): UpdateFoodOrderVm {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFoodOrderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["FoodId"] = this.foodId;
        data["UserId"] = this.userId;
        data["Count"] = this.count;
        data["Comment"] = this.comment;
        return data; 
    }
}

export interface IUpdateFoodOrderVm {
    id?: string;
    foodId?: string;
    userId?: string;
    count?: number;
    comment?: string | undefined;
}

export class DeleteFoodOrderVm implements IDeleteFoodOrderVm {
    id?: string;
    userId?: string;

    constructor(data?: IDeleteFoodOrderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.userId = _data["UserId"];
        }
    }

    static fromJS(data: any): DeleteFoodOrderVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFoodOrderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["UserId"] = this.userId;
        return data; 
    }
}

export interface IDeleteFoodOrderVm {
    id?: string;
    userId?: string;
}

export class UserPaidStatusVm implements IUserPaidStatusVm {
    isPaid?: boolean;
    userId?: string;

    constructor(data?: IUserPaidStatusVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isPaid = _data["IsPaid"];
            this.userId = _data["UserId"];
        }
    }

    static fromJS(data: any): UserPaidStatusVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserPaidStatusVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsPaid"] = this.isPaid;
        data["UserId"] = this.userId;
        return data; 
    }
}

export interface IUserPaidStatusVm {
    isPaid?: boolean;
    userId?: string;
}

export class SetOrderStatusVm implements ISetOrderStatusVm {
    orderStatus?: OrderStatus;

    constructor(data?: ISetOrderStatusVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderStatus = _data["OrderStatus"];
        }
    }

    static fromJS(data: any): SetOrderStatusVm {
        data = typeof data === 'object' ? data : {};
        let result = new SetOrderStatusVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderStatus"] = this.orderStatus;
        return data; 
    }
}

export interface ISetOrderStatusVm {
    orderStatus?: OrderStatus;
}

export class RestaurantVm implements IRestaurantVm {
    id?: string;
    title?: string | undefined;

    constructor(data?: IRestaurantVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.title = _data["Title"];
        }
    }

    static fromJS(data: any): RestaurantVm {
        data = typeof data === 'object' ? data : {};
        let result = new RestaurantVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Title"] = this.title;
        return data; 
    }
}

export interface IRestaurantVm {
    id?: string;
    title?: string | undefined;
}

export class RestaurantsListVm implements IRestaurantsListVm {
    restaurants?: RestaurantVm[] | undefined;

    constructor(data?: IRestaurantsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Restaurants"])) {
                this.restaurants = [] as any;
                for (let item of _data["Restaurants"])
                    this.restaurants!.push(RestaurantVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RestaurantsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new RestaurantsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.restaurants)) {
            data["Restaurants"] = [];
            for (let item of this.restaurants)
                data["Restaurants"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRestaurantsListVm {
    restaurants?: RestaurantVm[] | undefined;
}

export class CreateRestaurantCommand implements ICreateRestaurantCommand {
    title?: string | undefined;

    constructor(data?: ICreateRestaurantCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["Title"];
        }
    }

    static fromJS(data: any): CreateRestaurantCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        return data; 
    }
}

export interface ICreateRestaurantCommand {
    title?: string | undefined;
}

export class UpdateRestaurantCommand implements IUpdateRestaurantCommand {
    id?: string;
    title?: string | undefined;

    constructor(data?: IUpdateRestaurantCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.title = _data["Title"];
        }
    }

    static fromJS(data: any): UpdateRestaurantCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Title"] = this.title;
        return data; 
    }
}

export interface IUpdateRestaurantCommand {
    id?: string;
    title?: string | undefined;
}

export class GetFoodVm implements IGetFoodVm {
    id?: string;
    title?: string | undefined;
    cost?: number;
    description?: string | undefined;

    constructor(data?: IGetFoodVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.title = _data["Title"];
            this.cost = _data["Cost"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetFoodVm {
        data = typeof data === 'object' ? data : {};
        let result = new GetFoodVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Title"] = this.title;
        data["Cost"] = this.cost;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetFoodVm {
    id?: string;
    title?: string | undefined;
    cost?: number;
    description?: string | undefined;
}

export class FoodsListVm implements IFoodsListVm {
    title?: string | undefined;
    foods?: GetFoodVm[] | undefined;

    constructor(data?: IFoodsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["Title"];
            if (Array.isArray(_data["Foods"])) {
                this.foods = [] as any;
                for (let item of _data["Foods"])
                    this.foods!.push(GetFoodVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FoodsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new FoodsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        if (Array.isArray(this.foods)) {
            data["Foods"] = [];
            for (let item of this.foods)
                data["Foods"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFoodsListVm {
    title?: string | undefined;
    foods?: GetFoodVm[] | undefined;
}

export class AddFoodVm implements IAddFoodVm {
    id?: string;
    title?: string | undefined;
    cost?: number;
    description?: string | undefined;

    constructor(data?: IAddFoodVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.title = _data["Title"];
            this.cost = _data["Cost"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddFoodVm {
        data = typeof data === 'object' ? data : {};
        let result = new AddFoodVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Title"] = this.title;
        data["Cost"] = this.cost;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddFoodVm {
    id?: string;
    title?: string | undefined;
    cost?: number;
    description?: string | undefined;
}

export class EditFoodVm implements IEditFoodVm {
    id?: string;
    title?: string | undefined;
    cost?: number;
    description?: string | undefined;

    constructor(data?: IEditFoodVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.title = _data["Title"];
            this.cost = _data["Cost"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditFoodVm {
        data = typeof data === 'object' ? data : {};
        let result = new EditFoodVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Title"] = this.title;
        data["Cost"] = this.cost;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditFoodVm {
    id?: string;
    title?: string | undefined;
    cost?: number;
    description?: string | undefined;
}

export class DeleteFoodVm implements IDeleteFoodVm {
    id?: string;

    constructor(data?: IDeleteFoodVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
        }
    }

    static fromJS(data: any): DeleteFoodVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFoodVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        return data; 
    }
}

export interface IDeleteFoodVm {
    id?: string;
}

export class IsFoodTitleTakenQuery implements IIsFoodTitleTakenQuery {
    title?: string | undefined;
    restaurantId?: string;
    foodId?: string;

    constructor(data?: IIsFoodTitleTakenQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["Title"];
            this.restaurantId = _data["RestaurantId"];
            this.foodId = _data["FoodId"];
        }
    }

    static fromJS(data: any): IsFoodTitleTakenQuery {
        data = typeof data === 'object' ? data : {};
        let result = new IsFoodTitleTakenQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["RestaurantId"] = this.restaurantId;
        data["FoodId"] = this.foodId;
        return data; 
    }
}

export interface IIsFoodTitleTakenQuery {
    title?: string | undefined;
    restaurantId?: string;
    foodId?: string;
}

export class UserVm implements IUserVm {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    bankName?: string | undefined;

    constructor(data?: IUserVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.phoneNumber = _data["PhoneNumber"];
            this.bankName = _data["BankName"];
        }
    }

    static fromJS(data: any): UserVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["PhoneNumber"] = this.phoneNumber;
        data["BankName"] = this.bankName;
        return data; 
    }
}

export interface IUserVm {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    bankName?: string | undefined;
}

export class UsersListVm implements IUsersListVm {
    users?: UserVm[] | undefined;

    constructor(data?: IUsersListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Users"])) {
                this.users = [] as any;
                for (let item of _data["Users"])
                    this.users!.push(UserVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UsersListVm {
        data = typeof data === 'object' ? data : {};
        let result = new UsersListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["Users"] = [];
            for (let item of this.users)
                data["Users"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUsersListVm {
    users?: UserVm[] | undefined;
}

export class CreateUserCommand implements ICreateUserCommand {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    bankName?: string | undefined;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.phoneNumber = _data["PhoneNumber"];
            this.bankName = _data["BankName"];
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["PhoneNumber"] = this.phoneNumber;
        data["BankName"] = this.bankName;
        return data; 
    }
}

export interface ICreateUserCommand {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    bankName?: string | undefined;
}

export class UpdateUserCommand implements IUpdateUserCommand {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    bankName?: string | undefined;

    constructor(data?: IUpdateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.phoneNumber = _data["PhoneNumber"];
            this.bankName = _data["BankName"];
        }
    }

    static fromJS(data: any): UpdateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["PhoneNumber"] = this.phoneNumber;
        data["BankName"] = this.bankName;
        return data; 
    }
}

export interface IUpdateUserCommand {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    bankName?: string | undefined;
}

export class IsPhoneNumberTakenQuery implements IIsPhoneNumberTakenQuery {
    phoneNumber?: string | undefined;
    userId?: string;

    constructor(data?: IIsPhoneNumberTakenQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["PhoneNumber"];
            this.userId = _data["UserId"];
        }
    }

    static fromJS(data: any): IsPhoneNumberTakenQuery {
        data = typeof data === 'object' ? data : {};
        let result = new IsPhoneNumberTakenQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PhoneNumber"] = this.phoneNumber;
        data["UserId"] = this.userId;
        return data; 
    }
}

export interface IIsPhoneNumberTakenQuery {
    phoneNumber?: string | undefined;
    userId?: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}